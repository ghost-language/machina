#!/usr/bin/env bash

VERSION="0.0.1"

# Define colors that are used in the help screen
SEQ="\x1b["
GREEN=${SEQ}"0;32m"
YELLOW=${SEQ}"33;01m"
CYAN=${SEQ}"0;36m"
WHITE=${SEQ}"0;37m"
NC='\033[0m'

# Verify operating system is supported...
UNAMEOUT="$(uname -s)"

case "${UNAMEOUT}" in
    Linux*)     MACHINE=linux;;
    Darwin*)    MACHINE=mac;;
    *)          MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Machine supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"machine.test"}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}

if [ "$MACHINE" == "linux" ]; then
    export SEDCMD="sed -i"
elif [ "$MACHINE" == "mac" ]; then
    export SEDCMD="sed -i .bak"
fi

# Ensure that Docker is running...
if ! docker info > /dev/null 2>&1; then
    echo -e "${WHITE}Docker is not running.${NC}" >&2

    exit 1
fi

# Determine if Machine is currently up...
PSRESULT="$(docker-compose ps -q)"

if docker-compose ps | grep 'Exit'; then
    echo -e "${WHITE}Shutting down old Machine processes...${NC}" >&2

    docker-compose down > /dev/null 2>&1

    EXEC="no"
elif [ -n "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi

# Function that outputs Machine is not running...
function machine_is_not_running {
    echo -e "${WHITE}Machine is not running.${NC}" >&2
    echo "" >&2
    echo -e "${WHITE}You may run Machine using the following commands:${NC} './bin/machine up' or './bin/machine up -d'" >&2

    exit 1
}

function showVersion {
    intro="\nðŸ¦¾  ${GREEN}Machine for Ghost${NC}\n"
    intro="$intro    ${CYAN}Version ${VERSION}\n${NC}"

    printf "$intro\n"
}

function showHelp {
    showVersion

    usage="${YELLOW}Usage:\n${NC}"
    usage="$usage  ./machine <cmd> <options>"

    examples="${YELLOW}Examples:\n${NC}"
    examples="$examples  ${CYAN}$ ./machine start${NC}\n"
    examples="$examples  ${CYAN}$ ./machine stop${NC}\n"

    printf "$usage\n\n"
    printf "$examples\n"
}

if [ $# -gt 0 ]; then

    if [ "$1" == "--version" ] || [ "$1" == "-v" ] || [ "$1" == "version" ]; then
        showVersion
        exit 1
    fi

    if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$1" == "help" ]; then
        showHelp
        exit 1
    fi

    # Proxy Go commands to the "go" binary on the application container...
    if [ "$1" == "go" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u machine \
                "$APP_SERVICE" \
                go "$@"
        else
            machine_is_not_running
        fi
    else
        docker-compose "$@"
    fi
else
    docker-compose ps
fi